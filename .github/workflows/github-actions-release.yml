name: build-release-binary

run-name: Create Github Release

on: 
  push:
    #branches:
    #- main
    tags:
    - 'r*'

jobs:

  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write


    steps:

    # debug
    - name: Dump env
      run: env | sort
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - uses: actions/checkout@v3

    # Go environment
    - name: setup Go Lang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19.2'
    - run: |
        go version
        cd src
        go mod init fabianlee/docker-golang-signal-web
        go mod tidy
        go build -ldflags "-X main.Version=$(VERSION) -X main.BuildTime=$(BUILD_TIME) -X main.BuiltBy=makefile" main.go


    - name: get semantic tag version and release notes from commit messages
      id: tag 
      run: |
        curtag=${GITHUB_REF_NAME}
        major_minor=$(echo "$curtag" | cut -d'.' -f1-2)
        patch=$(echo "$curtag" | cut -d'.' -f3)
        ((patch--))
        prevtag="${major_minor}.${patch}"

        echo "# Commited Changes" > body.md
        if git tag | grep $prevtag ; then
          git log ${curtag}...${prevtag} --pretty="- %s \n" >> body.md
        else
          git log --pretty="- %s \n" >> body.md
        fi

        echo "curtag=$curtag" >> $GITHUB_OUTPUT
        echo "prevtag=$prevtag" >> $GITHUB_OUTPUT

    - run: echo curtag is ${{ steps.tag.outputs.curtag }}
    - run: echo prevtag is ${{ steps.tag.outputs.prevtag }}

    #  create release with release note written to file and binary asset attached
    - uses: ncipollo/release-action@v1
      with:
        name: ${{ env.GITHUB_REF_NAME }}
        tag: ${{ env.GITHUB_REF_NAME }}
        artifacts: "src/main"
        bodyFile: "body.md"
        token: ${{ secrets.GITHUB_TOKEN }}
